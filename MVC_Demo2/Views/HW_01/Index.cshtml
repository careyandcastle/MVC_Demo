@using MVC_Demo2.Models.ViewModel
@model HW_01_庫存盤點主檔DisplayViewModel
@using System.Diagnostics;
@using TscLibCore.Commons;
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@using TscLibCore.Modules;
@using TscLibCore.Authority;
@using System.ComponentModel.DataAnnotations;
@using TableFieldDescDictionary =
    System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.Dictionary<System.String, System.String>>;
@{ ViewData["Title"] = "庫存盤點作業";
    var tablesField = ViewBag.TableFieldDescDict;
    var masterTableDescHTML = Html.Raw(CreateTableFieldsDescription.TableFieldDescToHTML(tablesField, TableType.MasterTable));
    var detailTableDescHTML = Html.Raw(CreateTableFieldsDescription.TableFieldDescToHTML(tablesField, TableType.DetailTable));

    var requestToken = Html.Raw(Antiforgery.GetAndStoreTokens(Context).RequestToken);
    UserAccountForSession sess = HttpContextAccessor.HttpContext.Session.GetObject<UserAccountForSession>(nameof(UserAccountForSession));

    var canCreate = Html.Raw(sess.AddYn).ToString().ToLower();
    var canUpdate = Html.Raw(sess.UpdateYn).ToString().ToLower();
    var canDelete = Html.Raw(sess.DeleteYn).ToString().ToLower();
    var canQuery = Html.Raw(sess.QueryYn).ToString().ToLower();
    var canExport = Html.Raw(sess.ExportYn).ToString().ToLower();

    var dateTimePropertyName = new
    {
        MasterTable = new Dictionary<string, string>(),
        DetailTable = new Dictionary<string, string>()
    };
    var dateType = (datetime: "datetime", date: "date");
    foreach (var propName in ((TableFieldDescDictionary)tablesField)[TableType.MasterTable.ToString()])
    {
        var prop = typeof(HW_01_庫存盤點主檔DisplayViewModel).GetProperty(propName.Key);
        if (prop == null)
        {
            Debug.WriteLine($"找不到屬性：{propName.Key}");
            continue; // 欄位名稱在 ViewModel 裡不存在，略過
        }


        Type propertyType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (propertyType == typeof(DateTime))
        {
            var att = (DataTypeAttribute)prop.GetCustomAttributes(typeof(DataTypeAttribute), false).FirstOrDefault();
            var dateTimeFormat = att != null && att.DataType == DataType.Date ? dateType.date : dateType.datetime;
            dateTimePropertyName.MasterTable.Add(propName.Key, dateTimeFormat);
        }
    }
    foreach (var propName in ((TableFieldDescDictionary)tablesField)[TableType.DetailTable.ToString()])
    {
        var prop = typeof(HW_01_庫存盤點明細檔DisplayViewModel).GetProperty(propName.Key);
        if (prop == null)
        {
            // 可選：印出是哪個欄位名稱找不到（幫助你排錯）
            Debug.WriteLine($"⚠️ 無法對應 ViewModel 屬性：{propName.Key}");
            continue; // 跳過這個屬性
        }
        Type propertyType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (propertyType == typeof(DateTime))
        {
            var att = (DataTypeAttribute)prop.GetCustomAttributes(typeof(DataTypeAttribute), false).FirstOrDefault();
            var dateTimeFormat = att != null && att.DataType == DataType.Date ? dateType.date : dateType.datetime;
            dateTimePropertyName.DetailTable.Add(propName.Key, dateTimeFormat);
        }
    } }
@section MvcDemoHeadSection{
    <script src="~/js/site_hw_01.js"></script>
}
<h1 class="mt-1">@ViewData["Title"]</h1>
<div id="hw_01-index">
    <table-component id="hw_01-master-table" ref="hw_01-master-table">
        <template #default="slot">
            <b-row class="mb-2">
                <b-col cols="auto">
                    <b-button v-if="slot.data.canClick && slot.data.operatePermissions.canCreate" v-b-modal.master-table-create-modal class="mr-1" variant="detail3">新增</b-button>
                    <b-button v-if="slot.data.operatePermissions.canUpdate" v-b-modal.master-table-edit-modal :disabled="!slot.data.selectedMasterRow?.param" class="mr-1" variant="detail3">編輯</b-button>
                    <b-button v-if="slot.data.operatePermissions.canDelete" v-b-modal.master-table-del-modal :disabled="!slot.data.selectedMasterRow" class="mr-1" variant="detail3">刪除</b-button>
                    <b-button v-if="slot.data.operatePermissions.canExport" class="mr-1" variant="detail3" v-on:click="slot.data.onDataExport">匯出</b-button>
                    <b-button v-if="slot.data.operatePermissions.canQuery" v-b-modal.master-table-query-modal class="mr-1" variant="detail3">查詢</b-button>
                    <fetched-page-modal url="Create" id="master-table-create-modal" title="新增庫存盤點單"></fetched-page-modal>
                    <fetched-page-modal url="Edit" :param="slot.data.selectedMasterRow?.param" id="master-table-edit-modal" title="編輯庫存盤點單"></fetched-page-modal>
                    <fetched-page-modal url="Delete" :param="slot.data.selectedMasterRow?.param" id="master-table-del-modal" title="刪除庫存盤點單"></fetched-page-modal>
                    <query-page-modal id="master-table-query-modal" title="條件查詢" :queryfields="slot.data.mTableFields" :is_filtered="slot.data.isFiltered"></query-page-modal>
                    <fetched-page-modal url="CreateDetail" :param="slot.data.selectedMasterRow?.param" id="detail-table-create-modal" title="新增盤點明細"></fetched-page-modal>
                    <fetched-page-modal url="EditDetail" :param="slot.data.selectedDetailRow?.param" id="detail-table-edit-modal" title="編輯盤點明細"></fetched-page-modal>
                    <fetched-page-modal url="DeleteDetail" :param="slot.data.selectedDetailRow?.param" id="detail-table-del-modal" title="刪除盤點明細"></fetched-page-modal>
                </b-col>
            </b-row>
        </template>
    </table-component>
</div>
@section Scripts {
    <script>
        (function () {
            const _mTableFieldDesc = @masterTableDescHTML;
            const _dTableFieldDesc = @detailTableDescHTML;
            const masterTableKeys = ['進銷存組織', '單據別', '日期', '流水號'];
            const detailTableKeys = ['進銷存組織', '單據別', '日期', '流水號', '項次'];
            const dateTimePropertyName = @Json.Serialize(@dateTimePropertyName);
            const dsMasterProviderParams = { searchBy: null };

            const _dsMasterProvider = async function (ctx) {
                try {
                    Object.assign(dsMasterProviderParams, {
                        pageSize: ctx.perPage,
                        pageIndex: ctx.currentPage,
                        sortBy: ctx.sortBy,
                        isDesc: ctx.sortDesc || false
                    });
                    const response = await axios.post('/HW_01/GetDataPost', dsMasterProviderParams, {
                        headers: { 'content-type': 'application/json', 'RequestVerificationToken': "@requestToken" }
                    });
                    const latestData = TSCC.Utility.Table.GetDataSource.call(this, masterTableKeys, response, ctx);
                    latestData.forEach(data => {
                        Object.entries(dateTimePropertyName[TableType.MasterTable]).forEach(([k, v]) => {
                            if (data[k]) data[k] = new Date(data[k]).to_zhTW_string(v);
                        });
                    });
                    this.totalRows = response.data.total;
                    return latestData;
                } catch (err) {
                    console.error(err); return [];
                }
            }

            const _onMasterRowSelect = async function (rowData) {
                if (rowData.length === 0) return;
                const data = rowData[0];
                const selectParam = Object.fromEntries(masterTableKeys.map(k => [k, this[k] = data[k]]));
                Object.entries(dateTimePropertyName[TableType.MasterTable]).forEach(([k, v]) => {
                    if (data[k]) selectParam[k] = this[k] = Date.parse_zhTW_string(data[k]).toISOString();
                });
                this.selectedMasterRow.param = selectParam;
                const ret = await axios.get("CanClickCreate", { params: { index: data.__rowIndex__ } });
                this.canClick = ret.data;
            }

            const _dsDetailProvider = async function () {
                const postData = Object.fromEntries(masterTableKeys.map(k => [k, this[k]]));
                const response = await axios.post('/HW_01/GetDetailDataPost', postData, {
                    headers: { 'content-type': 'application/json', 'RequestVerificationToken': "@requestToken" }
                });
                const latestData = TSCC.Utility.Table.GetDataSource.call(this, detailTableKeys, response);
                latestData.forEach(data => {
                    Object.entries(dateTimePropertyName[TableType.DetailTable]).forEach(([k, v]) => {
                        if (data[k]) data[k] = new Date(data[k]).to_zhTW_string(v);
                    });
                });
                return latestData;
            }

            let _opPermiss = { canCreate: @canCreate, canUpdate: @canUpdate, canDelete: @canDelete, canQuery: @canQuery, canExport: @canExport };
            const params = {
                data: {
                    mTableFieldDesc: _mTableFieldDesc,
                    dTableFieldDesc: _dTableFieldDesc,
                    operatePermissions: _opPermiss,
                    isFiltered: false,
                    canClick: true,
                    進銷存組織: '', 單據別: 'INV', 日期: '', 流水號: '',
                    倉庫代號: '', 備註: '', 項次: ''
                },
                methods: {
                    dsMasterProvider: _dsMasterProvider,
                    onMasterRowSelect: _onMasterRowSelect,
                    dsDetailProvider: _dsDetailProvider,
                    onDataExport: async function () {
                        const res = await axios.post('@Url.Action("Export","HW_01")', dsMasterProviderParams, {
                            responseType: 'blob', headers: { RequestVerificationToken: "@requestToken" }
                        });
                        const url = window.URL.createObjectURL(new Blob([res.data], { type: res.headers['content-type'] }));
                        const link = document.createElement('a');
                        link.href = url;
                        link.setAttribute('download', 'HW_01.ods');
                        document.body.appendChild(link);
                        link.click();
                    }
                }
            };
            const vueInst = TSC_NS.CreateVue(params);
            vueInst.$mount('#hw_01-index');
        })();
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
 