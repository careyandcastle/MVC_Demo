@using MVC_Demo2.Models.ViewModel
@model HW_01_庫存盤點主檔DisplayViewModel
@using System.Diagnostics;
@using TscLibCore.Commons;
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@using TscLibCore.Modules;
@using TscLibCore.Authority;
@using System.ComponentModel.DataAnnotations;
@using TableFieldDescDictionary =
    System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.Dictionary<System.String, System.String>>;
@{ ViewData["Title"] = "庫存盤點作業";
    var tablesField = ViewBag.TableFieldDescDict;
    var masterTableDescHTML = Html.Raw(CreateTableFieldsDescription.TableFieldDescToHTML(tablesField, TableType.MasterTable));
    var detailTableDescHTML = Html.Raw(CreateTableFieldsDescription.TableFieldDescToHTML(tablesField, TableType.DetailTable));

    var requestToken = Html.Raw(Antiforgery.GetAndStoreTokens(Context).RequestToken);
    UserAccountForSession sess = HttpContextAccessor.HttpContext.Session.GetObject<UserAccountForSession>(nameof(UserAccountForSession));

    var canCreate = Html.Raw(sess.AddYn).ToString().ToLower();
    var canUpdate = Html.Raw(sess.UpdateYn).ToString().ToLower();
    var canDelete = Html.Raw(sess.DeleteYn).ToString().ToLower();
    var canQuery = Html.Raw(sess.QueryYn).ToString().ToLower();
    var canExport = Html.Raw(sess.ExportYn).ToString().ToLower();

    var dateTimePropertyName = new
    {
        MasterTable = new Dictionary<string, string>(),
        DetailTable = new Dictionary<string, string>()
    };
    var dateType = (datetime: "datetime", date: "date");
    foreach (var propName in ((TableFieldDescDictionary)tablesField)[TableType.MasterTable.ToString()])
    {
        var prop = typeof(HW_01_庫存盤點主檔DisplayViewModel).GetProperty(propName.Key);
        if (prop == null)
        {
            Debug.WriteLine($"找不到屬性：{propName.Key}");
            continue; // 欄位名稱在 ViewModel 裡不存在，略過
        }


        Type propertyType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (propertyType == typeof(DateTime))
        {
            var att = (DataTypeAttribute)prop.GetCustomAttributes(typeof(DataTypeAttribute), false).FirstOrDefault();
            var dateTimeFormat = att != null && att.DataType == DataType.Date ? dateType.date : dateType.datetime;
            dateTimePropertyName.MasterTable.Add(propName.Key, dateTimeFormat);
        }
    }
    foreach (var propName in ((TableFieldDescDictionary)tablesField)[TableType.DetailTable.ToString()])
    {
        var prop = typeof(HW_01_庫存盤點明細檔DisplayViewModel).GetProperty(propName.Key);
        if (prop == null)
        {
            // 可選：印出是哪個欄位名稱找不到（幫助你排錯）
            Debug.WriteLine($"⚠️ 無法對應 ViewModel 屬性：{propName.Key}");
            continue; // 跳過這個屬性
        }
        Type propertyType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (propertyType == typeof(DateTime))
        {
            var att = (DataTypeAttribute)prop.GetCustomAttributes(typeof(DataTypeAttribute), false).FirstOrDefault();
            var dateTimeFormat = att != null && att.DataType == DataType.Date ? dateType.date : dateType.datetime;
            dateTimePropertyName.DetailTable.Add(propName.Key, dateTimeFormat);
        }
    } }
@section MvcDemoHeadSection{
    <script src="~/js/site.js"></script>
}
<h1 class="mt-1">@ViewData["Title"]</h1>
<div id="hw_01-index">
    <table-component id="hw_01-master-table" ref="hw_01-master-table">
        <template #default="slot">
            <b-row class="mb-2">
                <b-col cols="auto">
                    <b-button v-if="slot.data.operatePermissions.canCreate" v-b-modal.master-table-create-modal class="mr-1" variant="detail3">新增</b-button>
                    <b-button v-if="slot.data.operatePermissions.canUpdate" v-b-modal.master-table-edit-modal @@click="slot.data.isNewItemOnTop = false" :disabled="!slot.data.selectedMasterRow?.param" class="mr-1" variant="detail3">修改</b-button>
                    <b-button v-if="slot.data.operatePermissions.canDelete" v-b-modal.master-table-del-modal @@click="slot.data.isNewItemOnTop = false" :disabled="!slot.data.selectedMasterRow" class="mr-1" variant="detail3">刪除</b-button>
                    <b-button v-if="slot.data.operatePermissions.canExport" class="mr-1" variant="detail3" v-on:click="slot.data.onDataExport" isWaitting="!isWaitting" :disabled="!slot.data.operatePermissions.enExport">匯出</b-button>
                    <b-button v-if="slot.data.operatePermissions.canQuery" v-b-modal.master-table-query-modal class="mr-1" variant="detail3">進階查詢</b-button>
                    <!--Master OP Page-->
                    <fetched-page-modal url="Create" id="master-table-create-modal" size="lg" close-on-success="true" title="新增資料"></fetched-page-modal>
                    <fetched-page-modal url="Edit" :param="slot.data.selectedMasterRow?.param" id="master-table-edit-modal" size="lg" close-on-success="true" title="修改資料"></fetched-page-modal>
                    <fetched-page-modal url="Delete" :param="slot.data.selectedMasterRow?.param" id="master-table-del-modal" size="lg" close-on-success="true" title="刪除資料"></fetched-page-modal>
                    <query-page-modal id="master-table-query-modal" title="進階查詢" :queryfields="slot.data.mTableFields" :is_filtered="slot.data.isFiltered"></query-page-modal>

                    <!--Detail OP Page-->
                    <fetched-page-modal url="CreateDetail" :param="slot.data.selectedMasterRow?.param" close-on-success="true"
                                        id="detail-table-create-modal" title="新增明細"></fetched-page-modal>
                    <fetched-page-modal url="EditDetail" :param="slot.data.selectedDetailRow?.param" close-on-success="true"
                                        id="detail-table-edit-modal" title="修改明細"></fetched-page-modal>
                    <fetched-page-modal url="DeleteDetail" :param="slot.data.selectedDetailRow?.param" close-on-success="true"
                                        id="detail-table-del-modal" title="刪除明細"></fetched-page-modal>
                     
                </b-col>
            </b-row>
        </template>
    </table-component>
</div>

@section Scripts {
    <script>
        (function () {
            const TableType = {
                MasterTable : "MasterTable",
                DetailTable : "DetailTable"
            };

            // 主檔 Table 欄位名稱中文定義（HW_01_庫存盤點主檔）
            const _mTableFieldDesc = @masterTableDescHTML;

            // 主檔 Key 欄位
            const masterTableKeys = [
                '進銷存組織',
                '單據別',
                '日期',
                '流水號'
            ];

            // 傳送給主檔 API 的參數
            let dsMasterProviderParams = {};

            // 時間欄位定義：由後端輸出
            const dateTimePropertyName = @Json.Serialize(@dateTimePropertyName);

            // 主檔資料來源：取得主檔清單資料
            const _dsMasterProvider = async function (ctx) {
                try {
                    dsMasterProviderParams.pageSize = ctx.perPage;
                    dsMasterProviderParams.pageIndex = ctx.currentPage;
                    dsMasterProviderParams.sortBy = ctx.sortBy;
                    dsMasterProviderParams.isDesc = ctx.sortDesc || false;

                    let response = await axios.post('GetDataPost', dsMasterProviderParams, {
                        headers: {
                            'content-type': 'application/json',
                            "RequestVerificationToken": "@requestToken"
                        }
                    });

                    this.totalRows = response.data.total;

                    let latestData = TSCC.Utility.Table.GetDataSource.call(this, masterTableKeys, response, ctx);

                    // 日期欄位轉台灣格式
                    latestData.forEach(data => {
                        Object.entries(dateTimePropertyName[TableType.MasterTable]).forEach(([propName, dateType]) => {
                            let dateISOstring = data[propName];
                            if (data.hasOwnProperty(propName) && dateISOstring) {
                                data[propName] = FormatDateByDataType(dateISOstring, dateType);
                            }
                        });
                    });

                    // 匯出按鈕啟用控制
                    this.params.data.operatePermissions.enExport = (this.totalRows > 0);

                    return latestData;
                } catch (error) {
                    debugger;
                    console.error("[DEBUG] 主檔資料來源 發生錯誤", error);
                    return [];
                }
            }
                        // 明細 Table 欄位中文定義（HW_01_庫存盤點明細）
            const _dTableFieldDesc = @detailTableDescHTML;

            // 明細 Key 欄位（必須包含主檔對應鍵與項次）
            const detailTableKeys = [
                '進銷存組織',
                '單據別',
                '日期',
                '流水號',
                '項次'
            ];

            // 明細資料來源：取得明細清單資料
            const _dsDetailProvider = async function (ctx) {
                try {
                    let postData = {
                        進銷存組織: this.進銷存組織,
                        單據別: this.單據別,
                        @*日期: this.日期,*@ 
                        @*2025-03 - 05T00: 00: 00.000Z*@
                        @*日期: this.formatDateTime(this.日期),*@
                        @*日期: (() => {
                            if (!this.日期) return null;
                            const d = new Date(this.日期);
                            const yyyy = d.getFullYear();
                            const MM = ('0' + (d.getMonth() + 1)).slice(-2);
                            const dd = ('0' + d.getDate()).slice(-2);
                            const HH = ('0' + d.getHours()).slice(-2);
                            const mm = ('0' + d.getMinutes()).slice(-2);
                            const ss = ('0' + d.getSeconds()).slice(-2);
                            return `${yyyy}-${MM}-${dd} ${HH}:${mm}:${ss}`;
                        })(),*@
                        日期: this.日期, // ← 用標準格式轉換
                        @*日期: new Date(this.日期).toISOString(), // ← 用標準格式轉換*@
                        流水號: this.流水號
                    };
                    debugger;
                   
                    console.log("[DEBUG] 發送明細查詢：", postData);

                    let response = await axios.post('GetDetailDataPost', postData, {
                        headers: {
                            'content-type': 'application/json',
                            "RequestVerificationToken": "@requestToken"
                        }
                    });
                    debugger;
                    console.log("[DEBUG] 明細 API 回應：", response.data);

                    let latestData = TSCC.Utility.Table.GetDataSource.call(this, detailTableKeys, response);

                    // 時間欄位轉台灣格式
                    latestData.forEach(data => {
                        Object.entries(dateTimePropertyName[TableType.DetailTable]).forEach(([propName, dateType]) => {
                            let dateISOstring = data[propName];
                            if (data.hasOwnProperty(propName) && dateISOstring) {
                                data[propName] = new Date(dateISOstring).to_zhTW_string(dateType);
                            }
                        });
                    });

                    return latestData;
                } catch (error) {

                    debugger;
                    console.error("[DEBUG] 明細 API 發生錯誤", error);
                    @*debugger;*@
                    return [];
                }
            };

            // 點擊主檔列觸發：設定明細查詢條件
                const _onMasterRowSelect = function (rowData) {
                    console.log("[DEBUG] onMasterRowSelect: 選取主檔", rowData);
                    debugger;
                    var selectParam = {
                        進銷存組織: null,
                        單據別: null,
                        日期: null,
                        流水號: null
                    };


                    @*let rawDate = new Date(data.日期); // 或 parse_zhTW_string(data.日期)
                    let dateOnly = rawDate.toISOString().substring(0, 10);*@

                    if (rowData.length > 0) {
                        let data = rowData[0];
                        console.log("[DEBUG] 傳送明細條件：", {
                            進銷存組織: data.進銷存組織,
                            單據別: data.單據別,
                            @*日期: data.日期,*@
                            日期: data.日期,
                            流水號: data.流水號
                        });
                        selectParam.進銷存組織 = this.進銷存組織 = data.進銷存組織;
                        selectParam.單據別 = this.單據別 = data.單據別;
                        selectParam.日期 = this.日期 = data.日期;
                        @*selectParam.日期 = this.日期 = dateOnly;*@
                        selectParam.流水號 = this.流水號 = data.流水號;
                        this.selectedMasterRow.param = selectParam;

                        // 日期欄轉 ISO 傳送給 server
                        Object.entries(dateTimePropertyName[TableType.MasterTable]).forEach(([propName, dateType]) => {
                            let dateLocalestring = data[propName];
                            if (selectParam.hasOwnProperty(propName) && data.hasOwnProperty(propName) && dateLocalestring) {
                                selectParam[propName] = this[propName] = Date.parse_zhTW_string(dateLocalestring).toISOString();
                            }
                        });
                    }
                    else {
                        console.warn("[DEBUG] 主檔未選擇任何列！");
                    }
                };

                // 點擊明細列觸發（如需再利用，可自定後續處理）
                const _onDetailRowSelect = function (rowData) {
                    var selectParam = {};
                    let data = rowData[0];
                    selectParam.進銷存組織 = this.進銷存組織 = data.進銷存組織;
                    selectParam.單據別 = this.單據別 = data.單據別;
                    selectParam.日期 = this.日期 = data.日期;
                    selectParam.流水號 = this.流水號 = data.流水號;
                    selectParam.項次 = this.項次 = data.項次;
                    this.selectedDetailRow.param = selectParam;

                    Object.entries(dateTimePropertyName[TableType.DetailTable]).forEach(([propName, dateType]) => {
                        let dateLocalestring = data[propName];
                        if (selectParam.hasOwnProperty(propName) && data.hasOwnProperty(propName) && dateLocalestring) {
                            selectParam[propName] = this[propName] = Date.parse_zhTW_string(dateLocalestring).toISOString();
                        }
                    });
                };
                        // 資料篩選處理
            const _assignFilter = function (filterData) {
                let shouldRefresh = this.isFiltered || (filterData && Object.keys(filterData).length > 0);
                this.isFiltered = !!filterData && Object.keys(filterData).length > 0;
                dsMasterProviderParams.searchBy = filterData;
                shouldRefresh && this.refreshMasterTable();
            };

            // 展開明細列（適用於 row detail）
            const _onToggleRowDetail = function (event, row) {
                row.selectRow();
            };

            // 匯出 ODS
            const _onDataExport = async function () {
                dsMasterProviderParams.searchBy = getQueryCondits.call(this);

                let response = await axios.post('@Url.Action("Export","HW_01")', dsMasterProviderParams, {
                    responseType: 'blob',
                    headers: {
                        RequestVerificationToken: "@requestToken"
                    }
                });

                const url = window.URL.createObjectURL(new Blob([response.data], {
                    type: response.headers['content-type']
                }));
                const link = document.createElement('a');
                link.href = url;
                link.setAttribute('download', 'HW_01.ods');
                document.body.appendChild(link);
                link.click();
            };

            // 篩選欄位輸入事件：監聽鍵盤按下、並收集條件
            const _onFilterValueUpdate = function (event) {
                const keyCodeAllowRegExp = /\b(8|4[6-9]|5[0-7]|6[5-9]|[7|8]\d|90|9[6-9]|10[0-5]|10[7-9]|11[0-1]|18[7-9]|13)\b/;
                if (typeof(event) == 'KeyboardEvent' && keyCodeAllowRegExp.test(event.keyCode.toString()) == false) return;

                let filterDataObj = {};
                for (let inputRef in this.$parent.$refs) {
                    let [inputInst, val] = [this.$parent.$refs[inputRef][0], ""];
                    if (inputRef.includes('filter_input_') && (val = inputInst.vModelValue).length > 0) {
                        filterDataObj[inputInst.name] = { condit: 'eq', value: val };
                    }
                }
                _assignFilter.call(this, filterDataObj);
            };

            // 高級查詢觸發
            const _onAdvanceSearch = function(qParams) {
                let filterDataObj = {};
                for (const [key, searchParam] of Object.entries(qParams)) {
                    console.log(`${key}: ${searchParam.condit},  ${searchParam.value}`);
                    filterDataObj[key] = searchParam;
                }
                _assignFilter.call(this, filterDataObj);
            };

            // 清除篩選條件
            const _onCleanFilter = function () {
                dsMasterProviderParams.searchBy = null;
                for (let inputRef in this.$parent.$refs) {
                    let inputInst = this.$parent.$refs[inputRef][0];
                    if (inputRef.includes('filter_input_')) {
                        inputInst.vModelValue = "";
                        inputInst.$el.value = "";
                    }
                }
                _assignFilter.call(this, null);
            };

            // 查詢結果回傳事件
            const _onFiltered = function (event) {
                console.log("_onFiltered customize: ", event);
            };

            // Server 端回傳驗證錯誤處理
            const _serverReturned = function (retData) {
                ShowValidateResult(retData, { filter: '#ModelErrorDiv' });
                console.log("serverReturned customize: ", retData);
            };

            // 掛載前事件（可設定固定高度等）
            const _onBeforeMount = function (tableInstance) {
                console.log("onBeforeMount customize");
            };

            const _onMounted = function (tableInstance) {
                console.log("_onMounted customize");
            };
                        // 授權操作權限（由後端注入）
            let _opPermiss = {
                canCreate: @canCreate,
                canUpdate: @canUpdate,
                canDelete: @canDelete,
                canQuery: @canQuery,
                canExport: @canExport
            };

            // Vue 初始化參數組合
            const params = { data: null, methods: null };

            // Data 區塊：Vue 組件的 reactive 屬性
            params.data = {
                mTableFieldDesc: _mTableFieldDesc,
                dTableFieldDesc: _dTableFieldDesc,
                operatePermissions: _opPermiss,
                isFiltered: false,
                isNewItemOnTop: true,

                // 主檔查詢條件欄位
                進銷存組織: '',
                單據別: '',
                日期: '',
                流水號: '',

                // 明細鍵欄位（初始化用）
                項次: ''
            };

            // Methods 區塊：Vue 組件的功能方法注入
            params.methods = {
                // 系統掛載必備方法
                dsMasterProvider: _dsMasterProvider,
                onMasterRowSelect: _onMasterRowSelect,
                dsDetailProvider: _dsDetailProvider,
                onDetailRowSelect: _onDetailRowSelect,
                onToggleRowDetail: _onToggleRowDetail,
                onBeforeMount: _onBeforeMount,
                onMounted: _onMounted,
                serverReturned: _serverReturned,
                onFiltered: _onFiltered,

                // 使用者自訂查詢與匯出
                onFilterValueUpdate: _onFilterValueUpdate,
                onAdvanceSearch: _onAdvanceSearch,
                onCleanFilter: _onCleanFilter,
                onDataExport: _onDataExport
            };

            // 掛載 Vue 組件（至 #hw_01-index）
            Vue.CreateVue(params).$mount('#hw_01-index');
        })();
    </script>

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
